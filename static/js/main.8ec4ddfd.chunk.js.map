{"version":3,"sources":["assets/background.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","props","morseCodes","state","name","onChangeText","event","text","target","value","setState","morseCodeOutput","getMorseCode","morseCode","string","i","length","char","charAt","bind","style","backgroundImage","width","height","position","top","justifyContent","display","minWidth","maxWidth","fontSize","onChange","this","bottom","minHeight","backgroundColor","color","fontStyle","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qHAAAA,EAAOC,QAAU,IAA0B,wC,sNCKtBC,E,kDACnB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAMVC,WAAa,CACX,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,QACL,EAAK,KACL,EAAK,OACL,EAAK,OACL,EAAK,MACL,EAAK,IACL,EAAK,OACL,EAAK,MACL,EAAK,OACL,EAAK,KACL,EAAK,OACL,EAAK,MACL,EAAK,OACL,EAAK,KACL,EAAK,KACL,EAAK,MACL,EAAK,OACL,EAAK,OACL,EAAK,MACL,EAAK,MACL,EAAK,IACL,EAAK,MACL,EAAK,OACL,EAAK,MACL,EAAK,OACL,EAAK,OACL,EAAK,OACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,UApDY,EAuDnBC,MAAQ,CACNC,KAAM,IAxDW,EA2DnBC,aAAe,SAAAC,GACb,IAAIC,EAAOD,EAAME,OAAOC,MACxB,EAAKC,SAAS,CAAEN,KAAMG,IACtB,IAAII,EAAkB,EAAKC,aAAaL,GACxC,EAAKG,SAAS,CAAEG,UAAWF,KA/DV,EAkEnBC,aAAe,SAAAL,GAIb,IAHA,IAAIO,EAASP,EACTM,EAAY,GAEPE,EAAI,EAAGA,EAAID,EAAOE,OAAQD,IAAK,CACtC,IAAIE,EAAOH,EAAOI,OAAOH,GAUzBF,IARa,MAATI,EACY,eACI,MAATA,EACK,+BAEA,EAAKf,WAAWe,KAGqB,GAGvD,OAAOJ,GAjFL,EAAKR,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKP,aAAe,EAAKA,aAAaO,KAAlB,gBAJL,E,qDAwFjB,OACE,yBAAKC,MAAO,CAAEC,gBAAgB,OAAD,OAASA,IAAT,KAA6BC,MAAO,QAASC,OAAQ,UAChF,yBAAKH,MAAO,CAAEI,SAAU,WAAYC,IAAK,OAAQC,eAAgB,SAAUJ,MAAO,OAAQK,QAAS,SACjG,2BAAOP,MAAO,CAACG,OAAQ,OAAQD,MAAO,OAAQM,SAAU,QAASC,SAAU,OAAQC,SAAU,QAASC,SAAUC,KAAK3B,gBAGvH,yBAAKe,MAAO,CAAEI,SAAU,WAAYS,OAAQ,OAAQP,eAAgB,SAAUJ,MAAO,OAAQK,QAAS,SACpG,yBAAKP,MAAO,CAACc,UAAW,OAAQZ,MAAO,OAAQM,SAAU,QAASC,SAAU,OAAQC,SAAU,OAAQK,gBAAiB,QAASC,MAAO,UAClIJ,KAAK7B,MAAMU,YAGlB,yBAAKO,MAAO,CAACI,SAAU,WAAYS,OAAQ,EAAGE,gBAAiB,QAASb,MAAO,OAAQI,eAAgB,SAAUC,QAAS,OAAQU,UAAW,WAC1I,gC,GArGsBC,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8ec4ddfd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.589a73a1.jpg\";","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport backgroundImage from './assets/background.jpg';\n\nexport default class App extends Component {\n  constructor(props) {\n      super(props);\n\n      this.onChangeText = this.onChangeText.bind(this);\n      this.getMorseCode = this.getMorseCode.bind(this);\n  }\n\n  morseCodes = {\n    \"0\": \"-----\",\n    \"1\": \".----\",\n    \"2\": \"..---\",\n    \"3\": \"...--\",\n    \"4\": \"....-\",\n    \"5\": \".....\",\n    \"6\": \"-....\",\n    \"7\": \"--...\",\n    \"8\": \"---..\",\n    \"9\": \"----.\",\n    \"a\": \".-\",\n    \"b\": \"-...\",\n    \"c\": \"-.-.\",\n    \"d\": \"-..\",\n    \"e\": \".\",\n    \"f\": \"..-.\",\n    \"g\": \"--.\",\n    \"h\": \"....\",\n    \"i\": \"..\",\n    \"j\": \".---\",\n    \"k\": \"-.-\",\n    \"l\": \".-..\",\n    \"m\": \"--\",\n    \"n\": \"-.\",\n    \"o\": \"---\",\n    \"p\": \".--.\",\n    \"q\": \"--.-\",\n    \"r\": \".-.\",\n    \"s\": \"...\",\n    \"t\": \"-\",\n    \"u\": \"..-\",\n    \"v\": \"...-\",\n    \"w\": \".--\",\n    \"x\": \"-..-\",\n    \"y\": \"-.--\",\n    \"z\": \"--..\",\n    \".\": \".-.-.-\",\n    \",\": \"--..--\",\n    \"?\": \"..--..\",\n    \"!\": \"-.-.--\",\n    \"-\": \"-....-\",\n    \"/\": \"-..-.\",\n    \"@\": \".--.-.\",\n    \"(\": \"-.--.\",\n    \")\": \"-.--.-\",\n  };\n\n  state = {\n    name: '',\n  };\n\n  onChangeText = event => {\n    let text = event.target.value;\n    this.setState({ name: text });\n    let morseCodeOutput = this.getMorseCode(text);\n    this.setState({ morseCode: morseCodeOutput});\n  }\n\n  getMorseCode = text => {\n    var string = text;\n    let morseCode = '';\n    \n    for (var i = 0; i < string.length; i++) {\n      let char = string.charAt(i);\n      let elementCode = '';\n      if (char === ' ') {\n        elementCode = '\\xa0\\xa0\\xa0';\n      } else if (char === '.') {\n        elementCode = '\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0\\xa0';\n      } else {\n        elementCode = this.morseCodes[char];\n      }\n\n      morseCode = morseCode + (elementCode ? elementCode : '');\n    }\n\n    return morseCode;\n  }\n\n  render() {\n    return (\n      <div style={{ backgroundImage: `url(${backgroundImage})`, width: '100vw', height: '100vh' }}>\n        <div style={{ position: 'absolute', top: '15vh', justifyContent: 'center', width: '100%', display: 'flex' }}>\n          <input style={{height: '4rem', width: 'auto', minWidth: '250px', maxWidth: '80vw', fontSize: '4rem'}} onChange={this.onChangeText}/>\n        </div>\n\n        <div style={{ position: 'absolute', bottom: '15vh', justifyContent: 'center', width: '100%', display: 'flex' }}>\n          <div style={{minHeight: '4rem', width: 'auto', minWidth: '250px', maxWidth: '80vw', fontSize: '3rem', backgroundColor: 'black', color: 'white'}}>\n              {this.state.morseCode}\n          </div>\n        </div>\n        <div style={{position: 'absolute', bottom: 0, backgroundColor: 'white', width: '100%', justifyContent: 'center', display: 'flex', fontStyle: 'italic'}}>\n          {'© Karan Asthana ©'}\n        </div>\n      </div>\n    )\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}